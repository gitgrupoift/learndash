@model LearnDash.Dal.Models.LearningFlow
<link href="../../Content/rectangles.css" rel="stylesheet" type="text/css" />
<div class="flow-name">
    <span>@Model.Name</span>
</div>
<ul id="flow-list">
    @foreach (var task in Model.Tasks)
    {
        var flowClass = "flow-task";

        if (task.IsNext)
        {
            flowClass += " flow-next-text";
        }
    
        <li class="@flowClass" data-id="@task.ID">
            <span style="float: left;">@task.Name</span>
            <button style="float: right;" name="btnRemoveTask" title="Remove task" class="btn btn-warning">
                <i class="icon-trash icon-white"></i>
            </button>
            <button style="float: right;" name="btnChangeName" title="Change name" class="btn btn-info">
                <i class="icon-pencil icon-white"></i>
            </button>
            <button style="float: right;" name="btnMakeNext" title="Make as next" class="btn btn-success">
                <i class="icon-ok icon-white"></i>
            </button>
            <div style="clear: both;"></div>
        </li>
    }
</ul>
<div class="control-group">
    <div class="controls">
        <input id="txtBoxTaskName" type="text" />
        <span id="taskNameValidation" class="help-inline" style="display: none;">Task name required</span>
    </div>
    <button id="btnAddTask" class="btn btn-primary">
        <i class="icon-plus icon-white"></i>Add Task</button>
    <button id="btnClear" class="btn btn-danger">
        <i class="icon-repeat icon-white"></i>Clear Flow</button>
</div>

<div id="dialog-name-change" title="Rename Item">
    <form>
        <fieldset>
            <label>Item Name</label>
            <input type="text" id="newItemName" />
        </fieldset>
    </form>
</div>


<script type="text/javascript">
    $(function () {
        InitKeyboardEvents();
        InitMenuButtons();
        InitTaskButtons();
        InitDialogs();

        $(document).tooltip();
    });

    function InitDialogs() {
        $("#dialog-name-change").dialog({
            autoOpen: false,
            height: 200,
            width: 350,
            modal: true,
        });
    }

    function InitKeyboardEvents() {
        $("#txtBoxTaskName").focus().keypress(function (e) {
            if (e.which == 13) {
                $("#txtBoxTaskName").blur();
                $("#btnAddTask").click();
            }
        });
    }

    function InitTaskButtons() {

        $("[name='btnChangeName']").unbind("click");
        $("[name='btnChangeName']").click(function () {
            var taskToEdit = $(this).parent();
            $("#newItemName").val(taskToEdit.children("span").text());

            $("#dialog-name-change").dialog("option", "buttons",
                {
                    Ok: function () {
                        var itemName = $("#newItemName").val();
                        if (itemName !== '') {
                            var id = taskToEdit.attr("data-id");
                            $.ajax({
                                type: "POST",
                                url: "@Url.Action("RenameItem", "LearningFlow")",
                                data: JSON.stringify({ taskId: id, itemName: itemName }),
                                dataType: "json",
                                contentType: 'application/json',
                                success: function (data) {
                                    if (data.isSuccess) {
                                        taskToEdit.children("span").text(itemName);
                                        $("#newItemName").val('');
                                        generateNoty('success', 'Item Renamed');
                                    } else {
                                        generateNoty('error', 'Encountered error!');
                                    }
                                    hideLoadingOverlay();
                                }
                            });
                        } else {
                            generateNoty('error', 'Item name cannot be empty');
                        }

                        $(this).dialog("close");
                    },
                    Cancel: function () {
                        $(this).dialog("close");
                    }
                });
            $("#dialog-name-change").dialog("open");
        });

            $("[name='btnMakeNext']").unbind("click");
            $("[name='btnMakeNext']").click(function () {
                showLoadingOverlay();
                var lastTask = $('.flow-task');
                var newTask = $(this).parent();

                MakeNext('@Model.ID', newTask.attr('data-id'), "@Url.Action("MakeNext", "LearningFlow")",
                function (data) {
                    if (data.isSuccess) {
                        lastTask.removeClass("flow-next-text");
                        newTask.addClass("flow-next-text");

                        lastTask.children("[name='btnMakeNext']").show();
                        newTask.children("[name='btnMakeNext']").hide();
                        generateNoty('success', 'Task set as next');
                    }
                    else {
                        generateNoty('error', 'Encountered error!');
                    }
                    hideLoadingOverlay();
                });
            });
        
            $("[name='btnRemoveTask']").unbind("click");
            $("[name='btnRemoveTask']").click(function () {
                showLoadingOverlay();
                var removedTask = $(this).parent();

                if (removedTask.hasClass("flow-next-text")) {
                    var nextTask = removedTask.next();
                    if (nextTask.length > 0) {
                        nextTask.addClass("flow-next-text");
                        nextTask.children("[name='btnMakeNext']").hide();
                    }
                    else {
                        var previousTask = removedTask.prev();
                        previousTask.addClass("flow-next-text");
                        previousTask.children("[name='btnMakeNext']").hide();

                    }
                }

                var id = removedTask.attr('data-id');

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("RemoveTask", "LearningFlow")",
                    data: JSON.stringify({ taskId: id, flowId: '@Model.ID' }),
                    dataType: "json",
                    contentType: 'application/json',
                    success: function (data) {
                        if (data.isSuccess) {
                            removedTask.remove();
                            generateNoty('success', 'Task removed sucessfully!');
                        }
                        else {
                            generateNoty('error', 'Encountered error!');
                        }
                        hideLoadingOverlay();
                    }
                });
            });


            $(".flow-next-text").children("[name='btnMakeNext']").hide();
        }

        function InitMenuButtons() {
            $("#btnClear").click(function () {
                showLoadingOverlay();
                ClearFlow('@Model.ID', "@Url.Action("Clear", "LearningFlow")",
            function (data) {
                if (data.isSuccess) {
                    $('.flow-task').remove();
                    generateNoty('success', 'Flow Cleared!');
                }
                else {
                    generateNoty('error', 'Encountered error!');
                }
                hideLoadingOverlay();
            }
            );
            });

            var btnAddTask = $("#btnAddTask");
            btnAddTask.click(function () {
                showLoadingOverlay();

                // get value and clear textBox
                var txtBoxTaskName = $("#txtBoxTaskName");
                var taskName = ClearSpecialCharacters(txtBoxTaskName.val());
                txtBoxTaskName.val("");

                // task name validation
                $("#taskNameValidation").hide();
                $(".control-group").removeClass("error");

                if (isBlank(taskName)) {
                    $(".control-group").addClass("error");
                    $("#taskNameValidation").show();
                    hideLoadingOverlay(function () { $("#txtBoxTaskName").focus() });
                    return;
                }

                var currentElementsCount = $('.flow-task').size();
                var taskClass = "flow-task";

                var isNext = false;
                // if there are none tasks this task will be set as next
                if (currentElementsCount <= 0) {
                    taskClass = taskClass + " flow-next-text";
                    isNext = true;
                }
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("AddTask", "LearningFlow")",
                data: JSON.stringify({ task: { Name: taskName, IsNext: isNext }, flowId: '@Model.ID' }),
                dataType: "json",
                contentType: 'application/json',
                success: function (data) {
                    if (data.isSuccess) {
                        var newElement = GenerateNewTask(taskClass, data.message, taskName);
                        $("#flow-list").append(newElement);

                        InitTaskButtons();
                        generateNoty('success', 'Task sucessfully added!');
                    }
                    else {
                        generateNoty('error', 'Encountered error! - ' + data.message);
                    }
                    hideLoadingOverlay(function () { $("#txtBoxTaskName").focus(); });
                }
            });
        });

    }

    function GenerateNewTask(taskClass, taskId, taskName) {
        return $("<li class='" + taskClass + "' data-id='" + taskId + "' ><span style='float:left'>" + taskName + "</span>" +
            "<button style='float:right' name='btnRemoveTask' title='Remove task' class='btn btn-warning'><i class='icon-trash icon-white'></i></button>" +
            "<button style='float: right;' name='btnChangeName' title='Change name' class='btn btn-info'><i class='icon-pencil icon-white'></i></button>"+
            "<button style='float:right' name='btnMakeNext' title='Make next' class='btn btn-success'><i class='icon-ok icon-white'></i></button>" +
            "<div style='clear:both;'></div></li>");
    }

    function ClearSpecialCharacters(value) {
        return value.replace(/[<>]/g, "");
    }

    function isBlank(str) {
        return (!str || /^\s*$/.test(str));
    }
</script>
